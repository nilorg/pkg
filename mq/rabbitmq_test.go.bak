package mq

import (
	"context"
	"fmt"
	"log"
	"testing"
	"time"

	"github.com/nilorg/sdk/mq"
)

func TestRabbitMQPubSub(t *testing.T) {
	var client mq.Clienter
	var err error
	client, err = NewRabbitMQ("amqp://root:test123@localhost:5672/", "nilorg")
	if err != nil {
		t.Error(err)
		return
	}
	err = client.Subscribe("test", func(ctx context.Context, data []byte) error {
		log.Println("q1", 1111, string(data))
		return nil
	}, "q1")
	if err != nil {
		t.Error(err)
		return
	}
	err = client.Subscribe("test", func(ctx context.Context, data []byte) error {
		log.Println("q1", 22222, string(data))
		return nil
	}, "q1")
	if err != nil {
		t.Error(err)
		return
	}
	err = client.Subscribe("test", func(ctx context.Context, data []byte) error {
		log.Println(2222, string(data))
		return nil
	}, "q2")
	if err != nil {
		t.Error(err)
		return
	}
	for {
		err = client.Publish(context.Background(), "test", "message ... "+time.Now().Format(time.RFC3339))
		if err != nil {
			t.Error(err)
			return
		}
		fmt.Println("pub test")
		time.Sleep(time.Second * 5)
	}

}
